eig <- eigen(hes)
hes2 <- eig$vectors %*% diag(eig$values^(-0.5)) %*% t(eig$vectors)
adj_matrix <- hes2 %*% t(x)
adj <- apply(adj_matrix, 2, norm, type = "2")
z <- abs(adj * c(y - sigmoid(theta_tilde %*% t(x))))
c <- findC(sort(z), r)
pi <- c * z
pi[pi > 1] <- 1
delta <- rbinom(n = length(pi), size = 1, pi)
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
system.time(theta_hte <- optim(par = theta_tilde, fn = objHTE, gr = objHTEGr, x = x_save, y = y_save, delta = delta_save, pi = pi_save, method = "BFGS")$par)
result_full <- predictionAcc(theta_full)
result_lcc <- predictionAcc(theta_lcc)
result_hte <- predictionAcc(theta_hte)
cr[i,] <- c(result_full$correct_rate, result_lcc$correct_rate, result_hte$correct_rate)
auc[i,] <- c(result_full$AUC, result_lcc$AUC, result_hte$AUC)
loss[i,] <- c(predictionAcc2(theta_full), predictionAcc2(theta_lcc), predictionAcc2(theta_hte))
Sys.time() - start
cr
auc
loss
predictionAcc2(theta_lcc)
theta_lcc
theta_hte
x <- test[,-1]
y <- test[,1]
estimates <- theta_lcc
p_predict <- 1 / c(1 + exp(-estimates %*% t(x)))
summary(p_predict)
estimates <- theta_hte
p_predict <- 1 / c(1 + exp(-estimates %*% t(x)))
summary(p_predict)
estimates <- theta_hte
estimates <- theta_lcc
p_predict <- 1 / c(1 + exp(-estimates %*% t(x)))
summary(p_predict)
(sum(log(p_predict[y == 1])) + sum(log(1 - p_predict[y == 0]))) / length(y)
write.csv(cbind(cr, auc, loss), file = '/Users/xinwei/Desktop/Surprise sampling/simulation_result/final/webspam_prediction10cv_3.csv', row.names = FALSE)
for (i in 2:10) {
start <- Sys.time()
test_index <- rep(FALSE, n)
test_index[((i-1)*n_test+1):(i*n_test)] <- TRUE
test <- data[test_index,]
trn <- data[!test_index,]
x <- trn[,-1]
y <- trn[,1]
system.time(theta_full <- optim(par = rep(0.5, 100), fn = objMLE, gr = objMLEGr, x = x, y = y, method = "BFGS")$par)
pilot_size <- 5000
a0 <- pilot_size / (2 * sum(y == 0))
a1 <- pilot_size / (2 * sum(y == 1))
pi <- c()
delta <- c()
pi[y == 1] <- a1
pi[y == 0] <- a0
delta[y == 1] <- rbinom(n = length(pi[y == 1]), size = 1, pi[y == 1])
delta[y == 0] <- rbinom(n = length(pi[y == 0]), size = 1, pi[y == 0])
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
system.time(theta_tilde <- optim(par = rep(0.5, 100), fn = objHTE, gr = objHTEGr, x = x_save, y = y_save, delta = delta_save, pi = pi_save, method = "BFGS")$par)
r <- 5000
z <- c(abs(y - sigmoid(t(theta_tilde) %*% t(x))))
c <- findC(sort(z), r)
pi <- c * z
pi[pi > 1] <- 1
delta <- rbinom(n = length(pi), size = 1, pi)
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
system.time(theta_lcc <- optim(par = theta_tilde, fn = objLCC, gr = objLCCGr, theta_tilde = theta_tilde, x = x_save, y = y_save, delta = delta_save, method = "BFGS")$par)
hes <- hessian(x = x[1:45000,], a = c(sigmoid(theta_tilde %*% t(x[1:45000,]))))
#hes
for (j in 1:6) {
hes <-  hes + hessian(x = x[(45000 * j + 1):(45000 * (j + 1)),], a = c(sigmoid(theta_tilde %*% t(x[(45000 * j + 1):(45000 * (j + 1)),]))))
}
hes <- hes / nrow(trn)
eig <- eigen(hes)
hes2 <- eig$vectors %*% diag(eig$values^(-0.5)) %*% t(eig$vectors)
adj_matrix <- hes2 %*% t(x)
adj <- apply(adj_matrix, 2, norm, type = "2")
z <- abs(adj * c(y - sigmoid(theta_tilde %*% t(x))))
c <- findC(sort(z), r)
pi <- c * z
pi[pi > 1] <- 1
delta <- rbinom(n = length(pi), size = 1, pi)
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
system.time(theta_hte <- optim(par = theta_tilde, fn = objHTE, gr = objHTEGr, x = x_save, y = y_save, delta = delta_save, pi = pi_save, method = "BFGS")$par)
result_full <- predictionAcc(theta_full)
result_lcc <- predictionAcc(theta_lcc)
result_hte <- predictionAcc(theta_hte)
cr[i,] <- c(result_full$correct_rate, result_lcc$correct_rate, result_hte$correct_rate)
auc[i,] <- c(result_full$AUC, result_lcc$AUC, result_hte$AUC)
loss[i,] <- c(predictionAcc2(theta_full), predictionAcc2(theta_lcc), predictionAcc2(theta_hte))
Sys.time() - start
write.csv(cbind(cr, auc, loss), file = '/Users/xinwei/Desktop/Surprise sampling/simulation_result/final/webspam_prediction10cv_3.csv', row.names = FALSE)
}
start <- Sys.time()
fulldata <- data[sample(1:nrow(data), 1e5),]
y <- fulldata[,1]
x <- fulldata[,-1]
## Full MLE
system.time(theta_full <- optim(par = rep(0.5, 100), fn = objMLE, gr = objMLEGr, x = x, y = y, method = "BFGS")$par)
start <- Sys.time()
fulldata <- data[sample(1:nrow(data), 1e5),]
y <- fulldata[,1]
x <- fulldata[,-1]
## Full MLE
system.time(theta_full <- optim(par = rep(0.5, 100), fn = objMLE, gr = objMLEGr, x = x, y = y, method = "BFGS")$par)
## Pilot (WCC)
pilot_size <- 10000
a0 <- pilot_size / (2 * sum(y == 0))
a1 <- pilot_size / (2 * sum(y == 1))
pi <- c()
delta <- c()
pi[y == 1] <- a1
pi[y == 0] <- a0
delta[y == 1] <- rbinom(n = length(pi[y == 1]), size = 1, pi[y == 1])
delta[y == 0] <- rbinom(n = length(pi[y == 0]), size = 1, pi[y == 0])
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
system.time(theta_tilde <- optim(par = rep(0.5, 100), fn = objHTE, gr = objHTEGr, x = x_save, y = y_save, delta = delta_save, pi = pi_save, method = "BFGS")$par)
## Sampling prob
r <- 10000
z <- c(abs(y - sigmoid(t(theta_tilde) %*% t(x))))
c <- findC(sort(z), r)
pi <- c * z
pi[pi > 1] <- 1
delta <- rbinom(n = 1e5, size = 1, pi)
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
## LCC
system.time(theta_lcc <- optim(par = theta_tilde, fn = objLCC, gr = objLCCGr, theta_tilde = theta_tilde, x = x_save, y = y_save, delta = delta_save, method = "BFGS")$par)
## HTE
system.time(theta_hte <- optim(par = theta_tilde, fn = objHTE, gr = objHTEGr, x = x_save, y = y_save, delta = delta_save, pi = pi_save, method = "BFGS")$par)
size <- 1e5
V_hat <- hessian(x = x_save, a = delta_save / pi_save^2 * c(sigmoid(theta_hte$par %*% t(x_save)) - y_save)^2) / size
A_hat <- hessian(x = x_save, a = delta_save / pi_save * c(sigmoid(theta_hte$par %*% t(x_save)))) / size
se <- sqrt(diag(solve(A_hat) %*% V_hat %*% solve(A_hat)) / size) ####
lower <- theta_hte$par - 1.96 * se
upper <- theta_hte$par + 1.96 * se
Sys.time() - start
V_hat <- hessian(x = x_save, a = delta_save / pi_save^2 * c(sigmoid(theta_hte %*% t(x_save)) - y_save)^2) / size
A_hat <- hessian(x = x_save, a = delta_save / pi_save * c(sigmoid(theta_hte %*% t(x_save)))) / size
se <- sqrt(diag(solve(A_hat) %*% V_hat %*% solve(A_hat)) / size) ####
lower <- theta_hte - 1.96 * se
upper <- theta_hte + 1.96 * se
se
length(c(theta_full, theta_lcc, theta_hte, theta_tilde, length(delta_save), c, se^2, lower, upper, as.numeric(lower < theta_full & theta_full < upper)))
result <- matrix(nrow = 25, ncol = 802)
# 100 replications ##########################################
library(parallel)
simulation <- function(...) {
sigmoid <- function(x) 1 / (1 + exp(-x))
objMLE <- function(theta, x, y) -sum(y * (t(theta) %*% t(x)) - log(1 + exp(t(theta) %*% t(x))))
objMLEGr <- function(theta, x, y) -(t(x) %*% t(y - sigmoid(t(theta) %*% t(x))))
objLCC <- function(theta, theta_tilde, x, y, delta) -sum(delta * (y * (t(theta - theta_tilde) %*% t(x)) - log(1 + exp(t(theta - theta_tilde) %*% t(x)))))
objLCCGr <- function(theta, theta_tilde, x, y, delta) -(t(x) %*% t(delta * (y - sigmoid(t(theta - theta_tilde) %*% t(x)))))
objHTE <- function(theta, x, y, delta, pi) -sum((delta / pi) * (y * (t(theta) %*% t(x)) - log(1 + exp(t(theta) %*% t(x)))))
objHTEGr <- function(theta, x, y, delta, pi) -(t(x) %*% t((delta / pi) * (y - sigmoid(t(theta) %*% t(x)))))
hessian <- function(x, a) matrix(apply(a * t(apply(t(x), 2, function(x) x %o% x)), 2, sum), ncol(x))
findC <- function(z, r) {
c_ <- r / sum(z)
if (c_ * z[length(z)] <= 1) return(c_)
k <- sum(z == 0)
f <- function(c) {
pi <- c * z
pi[pi > 1] <- 1
return(sum(pi))
}
z1 <- 1 / z[(k+1):length(z)]
left <- 1; right <- length(z1)
repeat {
middle <- floor((left + right) / 2)
if (f(z1[middle]) > r) left <- middle else right <- middle
if (left >= right - 1) break
}
m <- left + k
c <- (r - (length(z) - m)) / sum(z[(k+1):m])
return(c)
}
data <- read.csv("/Users/xinwei/Desktop/Surprise sampling/webspam.csv")
result <- matrix(nrow = 25, ncol = 802)
for (i in 1:25) {
# Each of the 100 replications
start <- Sys.time()
fulldata <- data[sample(1:nrow(data), 1e5),]
y <- fulldata[,1]
x <- fulldata[,-1]
## Full MLE
system.time(theta_full <- optim(par = rep(0.5, 100), fn = objMLE, gr = objMLEGr, x = x, y = y, method = "BFGS")$par)
## Pilot (WCC)
pilot_size <- 10000
a0 <- pilot_size / (2 * sum(y == 0))
a1 <- pilot_size / (2 * sum(y == 1))
pi <- c()
delta <- c()
pi[y == 1] <- a1
pi[y == 0] <- a0
delta[y == 1] <- rbinom(n = length(pi[y == 1]), size = 1, pi[y == 1])
delta[y == 0] <- rbinom(n = length(pi[y == 0]), size = 1, pi[y == 0])
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
system.time(theta_tilde <- optim(par = rep(0.5, 100), fn = objHTE, gr = objHTEGr, x = x_save, y = y_save, delta = delta_save, pi = pi_save, method = "BFGS")$par)
## Sampling prob
r <- 10000
z <- c(abs(y - sigmoid(t(theta_tilde) %*% t(x))))
c <- findC(sort(z), r)
pi <- c * z
pi[pi > 1] <- 1
delta <- rbinom(n = 1e5, size = 1, pi)
save_index <- delta == 1
pi_save <- pi[save_index]
delta_save <- delta[save_index]
x_save <- x[save_index,]
y_save <- y[save_index]
## LCC
system.time(theta_lcc <- optim(par = theta_tilde, fn = objLCC, gr = objLCCGr, theta_tilde = theta_tilde, x = x_save, y = y_save, delta = delta_save, method = "BFGS")$par)
## HTE
system.time(theta_hte <- optim(par = theta_tilde, fn = objHTE, gr = objHTEGr, x = x_save, y = y_save, delta = delta_save, pi = pi_save, method = "BFGS")$par)
size <- 1e5
V_hat <- hessian(x = x_save, a = delta_save / pi_save^2 * c(sigmoid(theta_hte %*% t(x_save)) - y_save)^2) / size
A_hat <- hessian(x = x_save, a = delta_save / pi_save * c(sigmoid(theta_hte %*% t(x_save)))) / size
se <- sqrt(diag(solve(A_hat) %*% V_hat %*% solve(A_hat)) / size) ####
lower <- theta_hte - 1.96 * se
upper <- theta_hte + 1.96 * se
Sys.time() - start
result[i,] <- c(theta_full, theta_lcc, theta_hte, theta_tilde, length(delta_save), c, se^2, lower, upper, as.numeric(lower < theta_full & theta_full < upper))
}
return(result)
}
cl <- makeCluster(4)
clusterSetRNGStream(cl, 1)
system.time(
result <- do.call(rbind, parLapply(cl, seq_len(4), simulation))
)
stopCluster(cl)
write.csv(result, file = '/Users/xinwei/Desktop/Surprise sampling/simulation_result/final/webspam_varest.csv', row.names = FALSE)
var_est <- result[,403:502]
result_full <- result[,1:100]
result_lcc <- result[,101:200]
result_hte <- result[,201:300]
result_pilot <- result[,301:400]
apply(result_hte, 2, var)
apply(var_est, 2, mean)
se^3
se^2
contain <- result[,703:802]
apply(contain, 2, mean)
apply(result_hte, 2, var)
se
apply(result_full, 2, var)
result <- read.csv('/Users/xinwei/Desktop/Surprise sampling/simulation_result/final/webspam.csv')
result_hte <- result[,201:300]
apply(result_hte, 2, var)
a <- ""
a
is.null(a)
length(a)
?pt
a=1
?save
## Training data
load("/Users/xinwei/HKUST/1/MAFS-2018/data/data_201807.RData")
df = data_format1[[2]]
df
setwd
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201801.RData")
str(data_format1)
BCH <- data_format1[['BCH-USD']]
dim(BCH)
31 * 24 * 60
30 * 24 * 60
28 * 24 * 60
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201802.RData")
BCH <- data_format1[['BCH-USD']]
dim(BCH)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201803.RData")
BCH <- data_format1[['BCH-USD']]
dim(BCH)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201804.RData")
BCH <- data_format1[['BCH-USD']]
dim(BCH)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201805.RData")
BCH <- data_format1[['BCH-USD']]
dim(BCH)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201806.RData")
BCH <- data_format1[['BCH-USD']]
dim(BCH)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201807.RData")
BCH <- data_format1[['BCH-USD']]
dim(BCH)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201808.RData")
BCH <- data_format1[['BCH-USD']]
dim(BCH)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201801.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201802.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201803.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201804.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201805.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201806.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201807.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_201808.RData")
library(RJSONIO)
url <- "https://www.bitstamp.net/api/transactions/"
bs_data <- fromJSON(url) # returns a list
bs_df <- do.call(rbind,lapply(bs_data,data.frame,stringsAsFactors=FALSE))
head(bs_df)
library(plyr)
bs_df2 <- ldply(bs_data,data.frame)
library(RJSONIO)
# 2
nullToNA <- function(x) {
x[sapply(x, is.null)] <- NA
return(x)
}
url_m <- "http://api.bitcoincharts.com/v1/markets.json"
mkt_data <- fromJSON(url_m)
str(mkt_data)
mkt_data2 <- lapply(mkt_data,nullToNA)
mkt_df <- do.call(rbind,lapply(mkt_data2,data.frame,stringsAsFactors=FALSE))
head(mkt_df)
# 3
# Code to read compressed .gz files
# http://api.bitcoincharts.com/v1/csv/
# Data Source
bitcoin_file <- "bitstampUSD.csv.gz"
URL <- "http://api.bitcoincharts.com/v1/csv"
source_file <- file.path(URL,bitcoin_file)
# Data destination on local disk
dataDir <-"/Users/xinwei/HKUST/1/Bitcoin"
dest_file <- file.path(dataDir,bitcoin_file)
# Download to disk
download.file(source_file,destfile = dest_file)
# Uncompress .gz file and read into a data frame
raw <- read.csv(gzfile(dest_file),header=FALSE)
head(raw,2)
names(raw) <- c("unixtime","price","amount")
raw$date <- as.Date(as.POSIXct(raw$unixtime, origin="1970-01-01"))
head(raw,2)
# Now for the payoff: we use dplyr functions and xts() to aggregate the transactions into a time series and digraph() visualize the results.
library(dplyr)
library(xts)
library(dygraphs)
library(dygraphs)
data <- select(raw,-unixtime)
# Now for the payoff: we use dplyr functions and xts() to aggregate the transactions into a time series and digraph() visualize the results.
library(dplyr)
data <- select(raw,-unixtime)
rm(raw)
data <- mutate(data,value = price * amount)
by_date <- group_by(data,date)
daily <- summarise(by_date,count = n(),
m_price <-  mean(price, na.rm = TRUE),
m_amount <- mean(amount, na.rm = TRUE),
m_value <-  mean(value, na.rm = TRUE))
names(daily) <- c("date","count","m_value","m_price","m_amount")
head(daily,2)
class(daily)
# Make the m_value variable into a time series object
daily_ts <- xts(daily$m_value,order.by=daily$date)
# Plot with htmlwidget dygraph
dygraph(daily_ts,ylab="US Dollars",
main="Average Value of bitstampUSD Buys") %>%
dySeries("V1",label="Avg_Buy") %>%
dyRangeSelector(dateWindow = c("2011-09-13","2015-11-02"))
View(data)
head(mkt_df)
?matrix
a <- matrix(1:4, nrow = 2, dimnames = list(c("r1","r2"), c('c1','c2')))
a
a[r1]
a[r1,]
a['r1',]
a <- matrix(1:4, nrow = 2, dimnames = list(c("r1","r2"), c('c1','c2')))
a['r1',]
a[,'c1']
data <- read.csv("/Users/xinwei/Dropbox/MAFS-2018/data/BTC-USD_T.csv")
tail(data)
load("/Users/xinwei/HKUST/1/MAFS-2018/R/demo2/functions.RData")
View(generate_bar)
?apply
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180923_20180930.RData")
View(data_format2)
head(data_format2)
data <- head(data_format2)
generate_bar(data)
generate_bar = function(data_list # ist containing n sequential elements from data_format2
){
open = data_list[[1]][, "open"]
close = data_list[[length(data_list)]][, "close"]
high_mat = do.call(rbind, lapply(data_list, FUN = function(x) x[, "high"]))
high = apply(high_mat, 2, max)
low_mat = do.call(rbind, lapply(data_list, FUN = function(x) x[, "low"]))
low = apply(high_mat, 2, min)
volume_mat = do.call(rbind, lapply(data_list, FUN = function(x) x[, "volume"]))
volume = apply(volume_mat, 2, sum)
output = data.frame(open=open, high=high, low=low, close=close, volume=volume)
rownames(output) = rownames(data_list[[1]])
return(output)
}
generate_bar(data)
setwd("/Users/xinwei/Dropbox/MAFS-2018/data")
start_time = "2018-09-30 06:00:00"
end_time = "2018-10-7 06:00:00"
# format 1
files = list.files(pattern="*.csv")
data = list()
for(file in files){
df = read.csv(file)
df$time = as.character(df$time)
df$time = strptime(df$time, format="%Y-%m-%d %H:%M:%S")
df = df[(df$time >= start_time) & (df$time < end_time),]
filename = strsplit(strsplit(file, split = ".csv")[[1]], split = "_")[[1]][1]
data[[filename]] = df
}
# format 2
sample = data[[filename]]
time_length = nrow(sample)
time_list = strftime(sample$time, format = "%Y-%m-%d %H:%M:%S")
data_format2 = list()
for(k in 1:time_length){
data_format2[[time_list[k]]] =
do.call(rbind, lapply(data, FUN = function(data_i, k) data_i[k,], k=k))[, 2:6]
}
data_format1 = data
rm(list=setdiff(ls(), c("data_format1", "data_format2")))
save.image(file = "data_20180930_20181007.RData")
setwd("/Users/xinwei/Dropbox/MAFS-2018/data")
start_time = "2018-10-01 06:00:00"
end_time = "2018-10-7 06:00:00"
# format 1
files = list.files(pattern="*.csv")
data = list()
for(file in files){
df = read.csv(file)
df$time = as.character(df$time)
df$time = strptime(df$time, format="%Y-%m-%d %H:%M:%S")
df = df[(df$time >= start_time) & (df$time < end_time),]
filename = strsplit(strsplit(file, split = ".csv")[[1]], split = "_")[[1]][1]
data[[filename]] = df
}
# format 2
sample = data[[filename]]
time_length = nrow(sample)
time_list = strftime(sample$time, format = "%Y-%m-%d %H:%M:%S")
data_format2 = list()
for(k in 1:time_length){
data_format2[[time_list[k]]] =
do.call(rbind, lapply(data, FUN = function(data_i, k) data_i[k,], k=k))[, 2:6]
}
data_format1 = data
rm(list=setdiff(ls(), c("data_format1", "data_format2")))
save.image(file = "data_20181001_20181007.RData")
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180930_20181007.RData")
View(data_format1)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180923_20180930.RData")
View(data_format1)
View(data_format2)
View(data_format1)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180916_20180923.RData")
View(data_format1)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180930_20181007.RData")
View(data_format1)
View(data_format2)
View(data_format1)
tail(data_format1['BCH-USD'])
tail(data_format1[['BCH-USD']])
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180923_20180930.RData")
View(data_format1)
tail(data_format1[['BCH-USD']])
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180930_20181007.RData")
View(data_format1)
tail(data_format1[['BCH-USD']])
head(data_format1[['BCH-USD']])
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180923_20180930.RData")
head(data_format1[['BCH-USD']])
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180901_20180909.RData")
View(data_format1)
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180909_20180916.RData")
View(data_format1)
head(data_format1[['BCH-USD']])
7*24860
7*24*60
6*24*60
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20181001_20181007.RData")
View(data_format1)
(7*24+6)*60
8*24*60
load("/Users/xinwei/Dropbox/MAFS-2018/data/data_20180901_20180909.RData")
View(data_format1)
head(data_format1[['BCH-USD']])
